// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

/**
 * Role-Based Access Control (RBAC) Models
 */
model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  alias       String?
  is_admin    Boolean          @default(false)
  is_default  Boolean
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  group_name String?
  created_at DateTime?
  roles      RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model NotificationType {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  notificationTemplate NotificationTemplate[]
}

model NotificationTemplate {
  id                 String                   @id @default(uuid())
  subject            String?
  default_content    String?
  custom_content     String?
  type               NotificationTemplateType @default(MAIL)
  notificationTypeId Int
  created_at         DateTime                 @default(now())
  updated_at         DateTime                 @updatedAt

  notificationType NotificationType @relation(fields: [notificationTypeId], references: [id])
}

model User {
  id                  String    @id @default(uuid())
  supabaseId          String?   @unique // Link to Supabase auth.users.id (UUID)
  email               String    @unique
  email_verified_date DateTime?
  phone               String?   @unique
  password            String?
  first_name          String?
  last_name           String?
  image               String?
  is_activated        Boolean   @default(false)
  is_deleted          Boolean   @default(false)
  roleId              Int
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  // Relations
  role              Role                      @relation(fields: [roleId], references: [id], onDelete: Restrict)
  businessProfile   BusinessProfile[]
  account           Account[]
  session           Session[]
  notifications     ApplicationNotification[] @relation("ReceivedNotifications") // Added relation name
  sentNotifications ApplicationNotification[] @relation("SentNotifications") // Added for sender
  activities        UserActivity[] // User's own actions
  preference        NotificationPreference[]
  // conversation      Conversation[]
  conversations     ConversationUser[]
  message           Message[]
}

model BusinessProfile {
  id                String   @id @default(uuid())
  userId            String
  company_name      String   @unique
  phone_number      String
  business_number   String?  @unique // Business WhatsApp phone number
  company_location  String?
  company_website   String?
  business_industry String?
  business_category String?
  annual_revenue    String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id          Int      @id @default(autoincrement())
  identifier  String
  token       String   @unique
  isTokenUsed Boolean  @default(false)
  expires     DateTime

  @@unique([identifier, token])
}

model ApplicationNotification {
  id          String                   @id @default(uuid())
  recipientId String // User receiving the notification
  senderId    String? // Optional: User sending it (e.g., a seller messaging a buyer)
  type        AppNotificationType      @default(SYSTEM) // e.g., 'order_update', 'new_message', 'product_review', 'promotion'
  channel     NotificationTemplateType @default(IN_APP)
  title       String // Short subject, e.g., "Order Shipped!"
  body        String? // Detailed message, e.g., "Your iPhone order #123 is on its way."
  data        Json? // Flexible payload, e.g., { orderId: "abc", productName: "iPhone" }
  isRead      Boolean                  @default(false)
  isDeleted   Boolean                  @default(false) // Soft delete for cleanup
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  expiresAt   DateTime? // optional TTL/expiration for promo notifications

  // Relations
  // Relations with explicit names
  recipient User  @relation("ReceivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  sender    User? @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)

  @@index([recipientId]) // For fast queries by user
  @@index([type, createdAt(sort: Desc)]) // For filtering/sorting notifications
}

model UserActivity {
  id          String   @id @default(uuid())
  userId      String // The user who performed the action
  type        String // e.g., 'order_placed', 'product_reviewed', 'cart_added'
  description String // Human-readable log, e.g., "Added iPhone to cart"
  metadata    Json? // e.g., { productId: "xyz", quantity: 1 }
  createdAt   DateTime @default(now())

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // For fast user-specific queries
  @@index([type, createdAt(sort: Desc)]) // For timelines
}

model NotificationPreference {
  id        String                   @id @default(uuid())
  userId    String
  type      AppNotificationType
  channel   NotificationTemplateType
  enabled   Boolean                  @default(true)
  updatedAt DateTime                 @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, channel])
}

// Conversation (WhatsApp/Chat support)
model Conversation {
  id         String             @id @default(cuid())
  userId     String
  status     ConversationStatus @default(OPEN)
  isGroup    Boolean            @default(false)
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt

  // Relations
  users    ConversationUser[]
  messages Message[]
}

model ConversationUser {
  userId         String
  conversationId String
  joinedAt       DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@id([userId, conversationId])
}

// Message (Chat messages)
model Message {
  id             String           @id @default(cuid())
  conversationId String
  content        String
  direction      MessageDirection
  senderId       String?
  is_deleted     Boolean          @default(false)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User?        @relation(fields: [senderId], references: [id])
}

/**
 * Core Application Models
 */
// model Account {
//   id                String   @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   whatsapp_phone    String? // Business WhatsApp phone number
//   whatsapp_api_key  String? // For WhatsApp Business API integration
//   is_deleted        Boolean  @default(false)
//   refresh_token     String?
//   access_token      String?
//   created_at        DateTime @default(now())
//   updated_at        DateTime @updatedAt
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   user             User              @relation(fields: [userId], references: [id])
//   shops            Shop[]
//   messageTemplates MessageTemplate[]
//   campaigns        Campaign[]
// }

// model Session {
//   id            String   @id @default(cuid())
//   session_token String   @unique
//   userId        String
//   expires       DateTime

//   user User @relation(fields: [userId], references: [id])
//}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model MessageTemplate {
//   id         Int      @id @default(autoincrement())
//   accountId  String
//   name       String
//   content    String
//   approved   Boolean  @default(false) // WhatsApp approval status
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
//}

// model Shop {
//   id         String   @id @default(cuid())
//   name       String
//   ownerId    String
//   accountId  String
//   is_deleted Boolean  @default(false)
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   updatedAt  DateTime @updatedAt

//   // Relations
//   owner    User      @relation("ShopOwner", fields: [ownerId], references: [id])
//   account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
//   products Product[]
//   orders   Order[]
// }

// model Category {
//   id         String   @id @default(cuid())
//   name       String
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt

//   // Relations
//   products Product[]
// }

// model Product {
//   id          String   @id @default(cuid())
//   name        String
//   description String?
//   price       Float
//   stock       Int      @default(0)
//   image_url   String?
//   categoryId  String?
//   shopId      String
//   is_deleted  Boolean  @default(false)
//   created_at  DateTime @default(now())
//   updated_at  DateTime @updatedAt

//   // Relations
//   shop       Shop        @relation(fields: [shopId], references: [id])
//   category   Category?   @relation(fields: [categoryId], references: [id])
//   orderItems OrderItem[]
// }

// model Order {
//   id         String      @id @default(cuid())
//   userId     String
//   shopId     String
//   status     OrderStatus @default(PENDING)
//   total      Float
//   is_deleted Boolean     @default(false)
//   created_at DateTime    @default(now())
//   updated_at DateTime    @updatedAt

//   // Relations
//   user    User        @relation(fields: [userId], references: [id])
//   shop    Shop        @relation(fields: [shopId], references: [id])
//   items   OrderItem[]
//   payment Payment?
// }

// model OrderItem {
//   id         String   @id @default(cuid())
//   orderId    String
//   productId  String
//   quantity   Int
//   price      Float
//   is_deleted Boolean  @default(false)
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt

//   // Relations
//   order   Order   @relation(fields: [orderId], references: [id])
//   product Product @relation(fields: [productId], references: [id])
// }

// model Payment {
//   id         String        @id @default(cuid())
//   orderId    String        @unique
//   amount     Float
//   status     PaymentStatus @default(PENDING)
//   provider   String? // e.g. Razorpay, Stripe, PayStack etc.
//   created_at DateTime      @default(now())
//   updated_at DateTime      @updatedAt

//   // Relations
//   order Order @relation(fields: [orderId], references: [id])
// }

// // Conversation (WhatsApp/Chat support)
// model Conversation {
//   id         String             @id @default(cuid())
//   userId     String
//   status     ConversationStatus @default(OPEN)
//   created_at DateTime           @default(now())
//   updated_at DateTime           @updatedAt

//   // Relations
//   user     User      @relation(fields: [userId], references: [id])
//   messages Message[]
// }

// // Message (Chat messages)
// model Message {
//   id             String           @id @default(cuid())
//   conversationId String
//   userId         String?
//   content        String
//   direction      MessageDirection
//   is_deleted     Boolean          @default(false)
//   created_at     DateTime         @default(now())
//   updated_at     DateTime         @updatedAt

//   // Relations
//   conversation Conversation @relation(fields: [conversationId], references: [id])
//   user         User?        @relation(fields: [userId], references: [id])
// }

// // Campaigns / Broadcasts
// model Campaign {
//   id           String         @id @default(cuid())
//   name         String
//   message      String
//   accountId    String
//   status       CampaignStatus @default(DRAFT)
//   is_deleted   Boolean        @default(false)
//   scheduled_at DateTime?
//   created_at   DateTime       @default(now())
//   updated_at   DateTime       @updatedAt

//   // Relations
//   recipients CampaignRecipient[]
//   account    Account             @relation(fields: [accountId], references: [id], onDelete: Restrict)
// }

// model CampaignRecipient {
//   id         String        @id @default(cuid())
//   campaignId String
//   userId     String
//   status     MessageStatus @default(PENDING)
//   created_at DateTime      @default(now())
//   updated_at DateTime      @updatedAt

//   // Relations
//   campaign Campaign @relation(fields: [campaignId], references: [id])
//   user     User     @relation(fields: [userId], references: [id])
// }

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ConversationStatus {
  OPEN
  CLOSED
}

enum MessageDirection {
  PENDING
  SENT
  RECEIVED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENT
  COMPLETED
}

enum MessageStatus {
  PENDING
  SENT
  FAILED
}

enum NotificationTemplateType {
  IN_APP
  SMS
  MAIL
  DATABASE
  PUSH
}

enum AppNotificationType {
  REGISTRATION
  ORDER_UPDATE
  ORDER_PLACED
  NEW_MESSAGE
  PRODUCT_REVIEW
  PROMOTION
  PRICE_DROP
  SHIPPING_UPDATE
  SYSTEM
}
